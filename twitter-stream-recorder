#!/usr/bin/perl

############################################################################
##  Twitter stream recorder
##
##  This program is free software; you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation; either version 2 of the License, or
##  (at your option) any later version. See: COPYING-GPL.txt
##
##  This program  is distributed in the  hope that it will  be useful, but
##  WITHOUT   ANY  WARRANTY;   without  even   the  implied   warranty  of
##  MERCHANTABILITY  or FITNESS  FOR A  PARTICULAR PURPOSE.   See  the GNU
##  General Public License for more details.
##
##  You should have received a copy of the GNU General Public License
##  along with this program. If not, see <http:##www.gnu.org/licenses/>.
##
##  2015 - Jonathan G Rennison <j.g.rennison@gmail.com>
############################################################################

use strict;
use warnings;
use utf8;

use JSON;
use AnyEvent;
use AnyEvent::Twitter 0.63;
use AnyEvent::Twitter::Stream;
use Getopt::Std;
use File::Slurp;
use File::HomeDir;
use String::Numeric;
use DateTime;
use DateTime::HiRes;
use Memoize;
use Guard;

my $consumer_key    = q(rzAkUMSeOG9dtp85cywZZDisb);
# This is totally a secret...
my $consumer_secret = q(fMxkxJ5HrBY1f4XQE1Oux0VAOMPDhRmLFBzVndhedjRohiUbRa) =~ tr/n-za-mN-ZA-M/a-zA-Z/r;
my $access_token;
my $access_token_secret;
my ($user_json, $user_id, $user_name);
my $highest_id = 0;
my $file = File::Spec->catfile(File::HomeDir->my_home, '.twitter-stream-recorder');
my $preload_tweets = 0;

sub usage {
	print STDERR <<"EOL";
twitter-stream-recorder [options]
Prints a twitter streaming API userstream to STDOUT and/or to log files.

Options:
-f CONFIG_FILE
	Use CONFIG_FILE for API authorisation details,
	and to store state between sessions.
	Will not overwrite an existing file for new authorisations.
	If the file does not exist, the user must
	interactively authorise the application (enter a PIN on STDIN).
	Defaults to $file
-n
	Non-interactive mode.
	Fail if interactive authorisation is required.
-r
	Restart stream connection if it fails.
-g
	Use the REST API to fill any gaps between stream connections.
	Implies: -r.
-p INTEGER
	Prepend up to this many tweets to the output (using the REST API),
	up to the end of the previous session, if any.
	Defaults to $preload_tweets
-v
	Verbose mode
-t
	Timestamp verbose and diagnostic output
-l DIRECTORY
	Write stream to files in DIRECTORY.
	This will output one log file per day with using filenames of
	the form: twitter-stream-ID-NAME.YYYY-MM-DD.log
	Requires File::Write::Rotate to be installed.
-s
	Do not write to STDOUT
	This is useful when using -l to log to files.
-h
	Show usage
EOL
	exit 1;
}

my %opts;
getopts(':f:nrgp:vtl:sh', \%opts) or usage();
usage() if defined $opts{'h'};
$file = $opts{'f'} if defined $opts{'f'};
my $non_interactive = defined $opts{'n'};
$preload_tweets = $opts{'p'} if defined $opts{'p'};
my $restart_stream = defined $opts{'r'} || defined $opts{'g'};
my $fill_stream_gaps = defined $opts{'g'};
my $verbose = defined $opts{'v'};
my $ts_diag = defined $opts{'t'};
my $log_dir = $opts{'l'};
my $no_stdout = defined $opts{'s'};

unless(String::Numeric::is_int($preload_tweets) && $preload_tweets >= 0 && $preload_tweets <= 800) {
	die("-p (tweets to pre-load) mut be an integer in the range 0-800");
}

sub get_localtz {
	return DateTime::TimeZone->new(name => 'local');
}
memoize('get_localtz');

sub now_timestamp {
	return DateTime::HiRes->now(time_zone => get_localtz())->strftime("%F %T.%6N %z");
}

if($ts_diag) {
	$SIG{__WARN__} = sub {
		warn now_timestamp() . ": ", @_;
	};
	$SIG{__DIE__} = sub {
		die now_timestamp() . ": ", @_;
	};
}

sub log_verbose {
	return unless $verbose;
	unshift(@_, now_timestamp() . ": ") if $ts_diag;
	print STDERR @_;
}

my $rest_cv;
my @rest_cv_pending; # stream tweets are pushed to end, REST tweets are unshifted to front
my $log;

sub setup_rest_cv {
	return if $rest_cv && !$rest_cv->ready;

	$rest_cv = AnyEvent->condvar;
	$rest_cv->cb(sub {
		print_json($_) for @rest_cv_pending;
		@rest_cv_pending = ();
	});
}

sub authorise {
	# This is mostly based on AnyEvent::Twitter example code

	my %request_token;
	my $cv = AE::cv;
	$cv->begin;
	AnyEvent::Twitter->get_request_token(
		consumer_key    => $consumer_key,
		consumer_secret => $consumer_secret,
		callback_url    => 'oob',
		cb => sub {
			my ($location, $response, $body, $header) = @_;
			%request_token = %$response;

			print STDERR "\n",
				  "Access the authorization URL and get the PIN at \n\n",
				  "$location\n\n";

			$cv->end;
		},
	);
	$cv->recv;

	print STDERR "Input the PIN:\n";
	my $pin = <STDIN>;
	chomp $pin;

	$cv = AE::cv;
	$cv->begin;
	AnyEvent::Twitter->get_access_token(
		consumer_key       => $consumer_key,
		consumer_secret    => $consumer_secret,
		oauth_token        => $request_token{oauth_token},
		oauth_token_secret => $request_token{oauth_token_secret},
		oauth_verifier     => $pin,
		cb => sub {
			my ($token, $body, $header) = @_;
			$access_token         = $token->{oauth_token};
			$access_token_secret  = $token->{oauth_token_secret};
			$cv->end;
		},
	);
	$cv->recv;

	my $ua = get_ae_twitter();
	my ($vc_cv) = verify_cred($ua);
	$vc_cv->recv;

	print STDERR "\n",
	      "access_token        is $access_token\n",
	      "access_token_secret is $access_token_secret\n",
	      "user ID is " . $user_json->{id} . "\n",
	      "user screen_name is @" . $user_json->{screen_name} . "\n\n";

	write_config(no_clobber => 1);
}

sub write_config {
	my @args = @_;
	my %new = (
		consumer_key    => $consumer_key,
		consumer_secret => $consumer_secret,
		token           => $access_token,
		token_secret    => $access_token_secret,
		user_id         => $user_id,
		user_name       => $user_name,
		highest_id      => $highest_id,
	);
	write_file($file, { @args, atomic => 1, err_mode => 'carp' }, encode_json(\%new));
	log_verbose("Wrote out config\n");
}

sub load_config {
	my $config = decode_json(read_file($file));
	$consumer_key = $config->{consumer_key};
	$consumer_secret = $config->{consumer_secret};
	$access_token = $config->{token};
	$access_token_secret = $config->{token_secret};
	$user_id = $config->{user_id};
	$user_name = $config->{user_name};
	$highest_id = $config->{highest_id} // 0;
	log_verbose("Read in config\n");
}

sub get_ae_twitter {
	my $ua = AnyEvent::Twitter->new(
		consumer_key    => $consumer_key,
		consumer_secret => $consumer_secret,
		token           => $access_token,
		token_secret    => $access_token_secret,
	);
	return $ua;
}

sub verify_cred {
	my ($ua, $use_cv) = @_; # use_cv is optional
	my $cv = $use_cv // AE::cv;

	$cv->begin;
	$ua->get('account/verify_credentials', sub {
		my ($header, $response, $reason) = @_;
		if($response) {
			log_verbose("verify_credentials successful\n");
			$user_json = $response;
			$user_id = $user_json->{id};
			$user_name = $user_json->{screen_name};
		}
		else {
			warn get_rest_error(@_) . "\naborting";
			exit(1);
		}
		$cv->end;
	});
	return ($cv);
}

sub stream {
	my ($ua, $cv, $onconnect, $onend) = @_;

	log_verbose("About to connect to stream\n");

	setup_rest_cv();

	my $listener;

	my $end_stream = sub {
		undef $listener;
		$onend->() if $onend;
		$cv->end;
	};

	$cv->begin;
	$listener = AnyEvent::Twitter::Stream->new(
		consumer_key    => $consumer_key,
		consumer_secret => $consumer_secret,
		token           => $access_token,
		token_secret    => $access_token_secret,
		method          => "userstream",
		timeout         => 180,
		on_eof          => sub {
			warn "End of stream reached";
			$end_stream->();
		},
		on_error        => sub {
			my ($error) = @_;
			warn "Streaming error: $error";
			$end_stream->();
		},
		on_tweet        => sub {
			my ($tweet) = @_;
			stream_print_json($tweet);
			handle_tweet($tweet);
		},
		on_friends      => sub {
			log_verbose("Stream connected\n");
			$onconnect->() if $onconnect;
		},
	);
}

sub handle_tweet {
	my ($tweet) = @_;
	eval {
		my $id = $tweet->{id};
		if(defined $id && $id > $highest_id) {
			$highest_id = $id;
		}
	};
	warn $@ if $@;
}

sub stream_print_json {
	if($rest_cv->ready) {
		print_json(shift);
	}
	else {
		push @rest_cv_pending, shift;
	}
}

sub rest_print_json {
	unshift @rest_cv_pending, shift;
}

sub print_json {
	my ($obj) = @_;
	my $msg = encode_json($obj). "\n";
	print $msg unless $no_stdout;
	$log->write($msg) if defined $log;
}

sub get_rest_error {
	my ($header, $response, $reason, $error_response) = @_;
	my $err = "REST API error: failed to get: " . $header->{URL};
	$err .= "\n\t$reason";
	$err .= "\n\t" . $_->{code} . ": " . $_->{message} for @{$error_response->{errors}};
	return $err;
}

sub retry {
	my ($cv, $retry_count, $cb) = @_;

	$retry_count = 6 if $retry_count > 6;
	my $delay = 8 << $retry_count;

	$cv->begin;
	my $w; $w = AnyEvent->timer (
		after    => $delay,
		cb       => sub {
			$cb->();
			$cv->end;
			undef $w;
		},
	);
}

sub rest_fetch {
	my ($ua, $cv, $count, $max_id, $since_id, $retry_count) = @_;

	log_verbose("About to make REST API request\n");

	$retry_count //= 0;

	my $more_pending = 1;
	my %params = (
		include_entities  => 1
	);
	$params{since_id} = $since_id if defined $since_id;
	$params{max_id} = $max_id if defined $max_id;
	if($count > 200) {
		$params{count} = 200;
	}
	else {
		$params{count} = $count;
	}

	# Most recent (highest ID) comes first
	# Least recent (lowest ID) comes last
	# First page will be the newest

	$cv->begin;
	$ua->get('statuses/home_timeline', \%params, sub {
		my ($header, $response, $reason, $error_response) = @_;
		if(ref($response) eq "ARRAY") {
			my $tweet_count = scalar @$response;
			log_verbose("REST API: got $tweet_count tweets\n");
			if($tweet_count) {
				my $lowest_id = $response->[-1]->{id};
				for my $tweet (@$response) {
					rest_print_json($tweet);
					handle_tweet($tweet);
				}

				if($count > 200 && $tweet_count > 150) {
					# Possibly more tweets in next page
					# Use 150 as threshold to deal with a few tweets being filtered out due to deletion, etc.
					rest_fetch($ua, $cv, $count - 200, $lowest_id - 1, $since_id);
				}
			}
		}
		else {
			warn get_rest_error(@_) . "\nretrying";
			retry($cv, $retry_count, sub {
				rest_fetch($ua, $cv, $count, $max_id, $since_id, $retry_count + 1);
			});
		}
		$cv->end;
	});
}

sub start_stream {
	my ($ua, $cv, $rest_load_count, $retry_count) = @_;

	my $stream_err_handler = sub {
		my ($retry_count) = @_;

		if($restart_stream) {
			retry($cv, $retry_count, sub {
				start_stream($ua, $cv, $fill_stream_gaps ? 800 : 0, $retry_count + 1);
			});
		}
	};

	stream($ua, $cv, sub {
		if($rest_load_count) {
			rest_fetch($ua, $rest_cv, $rest_load_count, undef, $highest_id || undef);
		}
		else {
			$rest_cv->send;
		}
	}, sub { $stream_err_handler->($retry_count); });
}

sub setup_logging {
	return unless defined $log_dir;

	eval {
		require File::Write::Rotate;
		require File::Path;
	};
	die("File::Write::Rotate or File::Path is not available, cannot output logs.\n\n$@") if $@;

	File::Path->make_path($log_dir, { mode => 0700 });

	$log = File::Write::Rotate->new(
		dir => $log_dir,
		prefix => "twitter-stream-$user_id-$user_name",
		suffix => '.log',
		period => 'daily',
		lock_mode => 'exclusive',
	);
}

my $cv = AE::cv;

my @sig_handlers;
for my $sig ('TERM', 'INT', 'HUP') {
	push @sig_handlers, AnyEvent->signal(signal => $sig, cb => sub {
		print STDERR "Caught: SIG$sig\n";
		exit 1;
	});
}

if(-e $file) {
	load_config();
	my ($vc_cv) = verify_cred(get_ae_twitter());
	$vc_cv->recv;
}
elsif($non_interactive) {
	die("Not yet authorised, but currently in non-interactive mode.");
}
else {
	authorise();
}

setup_logging();

scope_guard {
	write_config();
};

start_stream(get_ae_twitter(), $cv, $preload_tweets, 0);
$cv->recv;
